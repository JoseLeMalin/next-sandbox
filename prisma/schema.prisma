generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime?
  accounts       Account[]
  createdCourses Course[]
  ownedCourses   CourseOnUser[]
  createdLessons Lesson[]
  ownedLessons   LessonOnUser[]
  sessions       Session[]
}

model Course {
  id           String         @id @default(cuid())
  name         String
  presentation String
  image        String
  createdAt    DateTime       @default(now())
  creatorId    String
  creator      User           @relation(fields: [creatorId], references: [id])
  users        CourseOnUser[]
  lessons      Lesson[]
}

model Lesson {
  id        String         @id @default(cuid())
  name      String
  rank      String
  content   String
  state     LessonState    @default(HIDDEN)
  createdAt DateTime       @default(now())
  courseId  String
  creatorId String         
  course    Course         @relation(fields: [courseId], references: [id])
  creator   User           @relation(fields: [creatorId], references: [id])
  users     LessonOnUser[]
}

model LessonOnUser {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  progress  Progress @default(NOT_STARTED)
  createdAt DateTime @default(now())
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
}

model CourseOnUser {
  id         String    @id @default(cuid())
  userId     String
  courseId   String
  createdAt  DateTime  @default(now())
  canceledAt DateTime?
  course     Course    @relation(fields: [courseId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum LessonState {
  HIDDEN
  PUBLISHED
  PUBLIC
}

enum Progress {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
